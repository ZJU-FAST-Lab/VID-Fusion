%YAML:1.0

# Estimator
use_vid:  1                                                                # set to 1 to run VID, set to 0 to run VINS-Mono

# topic names
imu_topic: "/djiros/imu" 
image_topic: "/camera/infra1/image_rect_raw"
control_topic: "/dynamic_model/thrust"  

# paths to store results of the state, computation times and external force estimates
output_path: "~/VID-Fusion_ws/src/vid_out" # path for csv file

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 0
   k2: 0
   p1: 0
   p2: 0
projection_parameters:
   fx: 384.18206787109375
   fy: 384.18206787109375
   cx: 320.95831298828125
   cy: 237.53884887695312

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ -4.9876902235101994e-03, 6.8975396706592029e-03,9.9996377279015758e-01, 
           -9.9994520639236018e-01, -9.2379465278691342e-03,-4.9238762056141860e-03,
           9.2036492313802842e-03, -9.9993353993674983e-01, 6.9432377451592586e-03]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [7.5661288872482843e-02, -1.1023937355649450e-03, 3.7679316555898373e-02]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: !!opencv-matrix # accelerometer measurement noise standard deviation.
   rows: 3
   cols: 1
   dt: d
   data: [0.009, 0.009, 0.009]
gyr_n:  0.025        # gyroscope measurement noise standard deviation.  
acc_w:  0.0001      # accelerometer bias random work noise standard deviation. 
gyr_w:  0.0002  # gyroscope bias random work noise standard deviation.  
g_norm: 9.79      # gravity magnitude

#model parameters       The more accurate parameters you provide, the better performance
control_thrust_z_n: 0.9       # standard deviation for noise in mass normalized collective thrust in body z axis (propellor axis)
control_thrust_x_y_n: 0.9     # standard deviation for noise in mass normalized collective thrust in body x and y axis
scale_thrust_input: 1

#rotor drag parameters
force_wo_rotor_drag: 0        #set to 1 to exclude rotor drag in external force publishing, set to 0 to include rotor drag in external force publishing
k_d_x: 0.33 #0.40             #rotor drag param x
k_d_y: 0.33 #0.25             #rotor drag param y

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "~/vid/vid_out/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: -0.0028                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet).

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
